apply plugin: 'com.android.library'
apply plugin: 'com.jakewharton.butterknife'
def cfg = rootProject.ext.android
def libraries = rootProject.ext.dependencies

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {


    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleCompatible
    implementation libraries['support_v7']
    implementation libraries['swiperefreshlayout']

    testImplementation libraries['junit']
    androidTestImplementation  libraries['junitx']
    androidTestImplementation  libraries['espresso-core']
    implementation libraries['rxjava2']
    //RxAndroid其实就是对RxJava的扩展
    implementation libraries['rxandroid']
    //Retrofit
    implementation libraries['retrofit']
    //RxJava和retrofit的结合使用 RxJava2CallAdapterFactory
    implementation libraries['retrofit2_rxjava2_adapter']

    //okhttp3
    implementation libraries['okio']
    implementation libraries['okhttp3']
    //Gson
    implementation  libraries['gson']
    //解析对应的json:
    implementation  libraries['onverter-gson']
    //View注入框架 在模块中需使用R2调用资源文件 并且监听不能使用switch-case  用else if替代
    api libraries["butterknife"]
    annotationProcessor libraries.butterknife_compiler
    //沉浸式状态栏
    implementation libraries['systembartint']
    //recyclerview
    implementation libraries['recyclerview']
    //Glide
    implementation libraries['glide']
    annotationProcessor libraries['glide:compiler']
    api libraries["logger"]
    api libraries["picture_library"]
}